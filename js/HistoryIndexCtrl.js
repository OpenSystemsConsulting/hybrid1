angular.module('HistoryIndexCtrl', [])


// A simple controller that fetches a list of data from a service
.controller('HistoryIndexCtrl', ['$rootScope', '$scope', '$state', 'History', 'Job', 'util',
	function($rootScope, $scope, $state, History, Job, util) {
	  $scope.history = [];

	  function getHistory() {
		  History.find()	// Method generated by the LoopBack Angular SDK
		    .$promise
		    .then(function(results) {
		      $scope.history = results;
		      		// An Array of All of the History Event...
		      		// TODO:  Add "skip", and "limit" filters

		      $scope.history.sort(sortByEventTime).reverse();
			    function sortByEventTime(a,b) {
			    	return a.mobhistStamp - b.mobhistStamp;
			    }
			    		// Sort from most Recent Event on down...

		      for (var i = 0; i < $scope.history.length; i++) {
		      	$scope.convertDates($scope.history[i], $rootScope.historyMetadata);
		      }
		      		// Show Dates in a shortened format...

		      $scope.titleWithTotal = "Event History (" + $scope.history.length + ")";
		      		// The View Title tells us how many Events there are in the List...
		    });
	  }

	  var defaultActionButtons = [
	  	{ text: 'Show Jobs', command: 'jobs'}
	  ]

		$scope.showActionSheet = function() {
			return;  // No real need for a Context Menu on the History Events View...

			// But, just in case, let's keep this method here as a stub...
			var buttons = util.copyObject(defaultActionButtons);
			$scope.showActionSheetBase("Actions from this Event History", buttons, function(command) {
				 	switch (command) {
				 		case "jobs":
				 			window.location.href = "#/tab/jobs";
				 			break;
				 	}
			}, false);
		}

		// Generate a meaningful Title generated from "includeInHeader" Properties...
	  $scope.generateHistoryHeader = function(item, bLabels) {
	  	return $scope.generateHeaderForModelInstance(item, $rootScope.historyMetadata, bLabels);
	  }

	  $scope.getModelMetadata(History, "historyMetadata", function(metadata) {
	  	// Don't do anything until we have the Metadata to work with...
	  	getHistory();
	  });

	}
])



