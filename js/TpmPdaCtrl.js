angular.module('TpmPdaCtrl', [])

// For the View which is Displaying a History Event or creating a New History Event
.controller('TpmPdaCtrl', ['$scope', '$state', 'TpmPdaController','util',
	function($scope, $state, TpmPdaController`, util) {

	  $scope.bNewItem = false;		// Just looking at an existing Event by default
	  var imeiId = '';							// Every History Event is associated with a Job

	  function getImeid() {
	  	var imeiId = $state.params.imei_num;  // A single Event to Display
	  	imeiId = $state.params.TPMPC_IMEI_ID;						// Or maybe all Events for a Job

	  	if (imeiId.indexOf('-New') > 0) {				// Creating a new Event for a Job
	  		$scope.bNewItem = true;								// Toggle the View to Edit Mode
	  		imeiId = imeiId.replace('-New', '');		// Isolate the imeiId
	  		return newTpmPdaController();									// Return a default Event Item
	  	}

	  	var filter = {"filter":
		                  {
		                    "where": {"mobhistSeq": historyId},
		                    "include": "jobs"
		                  }
	                	}; 
	        // By default, find a singleEvent

	    if (imeiId >= 0) {
	    	filter.filter.where = {"TPMPC_IMEI_ID": imeiId};
	    }		// Or, alternatively, all Events for a Job...

      History.find(filter)	// Method generated by the LoopBack Angular SDK
        .$promise
        .then(function(results) {
        	if (results.length === 0) {
        		window.location.href = "#/tab/history";
        			// If no Events found, show them all...
        		return;
        	}

					$scope.history = results;
						// an Array of one or more Events

		      $scope.history.sort(sortByEventTime).reverse();
			    function sortByEventTime(a,b) {
			    	return a.mobhistStamp - b.mobhistStamp;
			    }
			    	// sort them from Most Recent Event on down

					$scope.tpmPdaController = new Array($scope.history.length);
						// Each Event will have to have Metadata to control its Display...

					for (var i = 0; i < $scope.history.length; i++) {
						$scope.tpmPdaController[i] = $scope.combineValuesAndLabels($scope.history[i], $rootScope.historyMetadata);
							// Set up the Metadata to control the Display of each Event...

						$scope.base.bDataChanged = false;
							// Just viewing them, so we shouldn't display a Save Button

						if (imeiId >= 0) {
							$rootScope.tabHeader = "History Events for Job: " + imeiId;
						}
						else {
							$rootScope.tabHeader = "Job History Event";
						}
							// Set up an appropriate View Header Title...

						var jobProperty = util.findArrayItemByKey($scope.tpmPdaController[i], "property", "imeiId");
						if (jobProperty) {
							imeiId = jobProperty.value;
	          	jobProperty.generatedValue = $scope.generateHeaderForModelInstance($scope.history[i].jobs, $rootScope.jobMetadata);
	          }
	          	// Set up a Friendlier Title for the Associated Job...
					}
        });
	  }

	  function newTpmPdaController() {
  		$scope.bNewItem = true;	// Display the Save Button...

			$scope.history = [{}];
			$scope.tpmPdaController = [];	// Set up the Containers to hold the Item and Metadata

			var idProperty = util.findArrayItemByKey($rootScope.historyMetadata.properties, "name", 'imeiId');
			if (idProperty) {
				$scope.history[0][idProperty.name] = imeiId;
			}	// ALWAYS associated with a specific JOB...

			$scope.tpmPdaController[0] = $scope.createNewItem($scope.history[0], $rootScope.historyMetadata);
				// Create the Default Item and its Metadata...

			$rootScope.tabHeader = 'New History Event';
	  }

	  var defaultActionButtons = [];

	  var defaultActionButtons = [
	  ];  // No Default Actions because Events are immutable...

		$scope.showActionSheet = function() {
			if (imeiId !== '') {
				var buttons = util.copyObject(defaultActionButtons);
			  buttons.push({ text: 'Add a History Event', command: 'addEvent'});
			  	// You can add another History Event from within the Context
			  	// of another Event because there is ALWAYS a imeiId available...

				$scope.showActionSheetBase("Actions from this Event History", buttons, function(command) {
					 	switch (command) {
					 		case 'addEvent':
				 				window.location.href = '#/tab/history/-1/' + imeiId + '-New';
				 					// This is the Route to create a new History Event for a Job
						 		break;
					 	}
				}, false);
			}
		}

		$scope.saveEvent = function() {
 			$scope.updateItem($scope.history[0], $scope.tpmPdaController[0], History, function(results) {
 				window.location.href = '#/tab/history/-1/' + imeiId;
 					// Re-Display the Events for this Job.  The new one will be at the top...
 			}, $scope.bNewItem)
		}

	  $scope.generateHistoryHeader = function(item) {
	  	return $scope.generateHeaderForModelInstance(item, $rootScope.historyMetadata);
	  		// The Base Class generates meaningful Titles for any Entity...
	  }	

	  $scope.getModelMetadata(History, "historyMetadata", function(metadata) {
	  	$scope.getModelMetadata(Job, "jobMetadata", function(metadata) {
	  		// Once we are ensured to have all the Metadata we need
	  		getHistory();
	  			// Get the History Record(s)
	  	});
	  });


	}
])
